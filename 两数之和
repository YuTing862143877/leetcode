// 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。

// 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。

// 示例:

// 给定 nums = [2, 7, 11, 15], target = 9

// 因为 nums[0] + nums[1] = 2 + 7 = 9
// 所以返回 [0, 1]

func main() {
	fmt.Println(twoSumHash([]int{2, 3, 7},9))
	// var hashMap map[int]int
}

func twoSum(nums []int, target int) []int {
	for i, _ := range nums {
		for j, _ := range nums {
			if nums[i] + nums[j] == target {
				return []int{i, j}
			}
		}
	}
	return nil
}
// 一遍哈希
func twoSumHash(nums []int, target int) []int {
	if len(nums) == 0 {
		return nil
	}
	var hashMap = make(map[int]int, len(nums))
	for i, _ := range nums {
		diff := target - nums[i]
		if _, ok := hashMap[diff]; ok {
			return []int{hashMap[diff], i}
		} else {
			hashMap[nums[i]] = i
		}
	}
	return nil
}
