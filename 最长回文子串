给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。

示例 1：

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。
示例 2：

输入: "cbbd"
输出: "bb"

func isPalindromic(s string) bool {
	mid := len(s)/2
	last := len(s) - 1
	for i := 0; i < mid; i++ {
		if s[i] != s[last - i] {
			return false
		}
	}
	return true
}

func longestPalindrome(s string) string {
	last := len(s) - 1
	longest := string(s[0])
	for i := 0; i < last; i ++ {
		for j := i + 1; j < last; j ++ {
			if isPalindromic(s[i:j + 1]) && (j - i + 1 > len(longest)) {
				longest = s[i:j + 1]
			}
		}
	}
	return longest
}


func longestPalindrome(s string) string {
	if len(s) < 2 {
		return s
	}
	updateS := ""
	for _, v := range s {
		updateS += "#" + string(v)
	}
	updateS = "$" + updateS + "#%"
	length := make(map[int]int)
	var mr, mi, ms = 0, 0, ""
	for i := 1; i < len(updateS) - 1; i ++ {
		if i < mr {
			if length[2 * mi - i] < mr - i + 1 {
				length[i] = length[2 * mi - i]
			} else {
				length[i] = mr - i + 1
			}
		} else {
			length[i] = 1
		}
		for updateS[i + length[i]] == updateS[i - length[i]] {
			length[i] ++
		}
		length[i] -- 
		if i + length[i] > mr {
			mi = i
			mr = i + length[i]
		}
		if length[i] > len(ms) {
			ms = strings.Replace(updateS[i - length[i] : i + length[i] + 1], "#", "", -1)
		}
	}
	return ms
}

func longestPalindrome(s string) string {
	if len(s) < 2 {
		return s
	}
	begin, maxLen:=0,1
	for i := 0 ; i< len(s);{
		if len(s)-i <= maxLen/2 {
			break
		}
		b, e := i, i
		for e < len(s)-1 && s[e+1] == s[e] {
			e++
		}
		i = e + 1
		for e < len(s)-1 && b > 0 && s[e+1] == s[b-1] {
			e++
			b--
		}
		newLen := e + 1 - b
		if newLen > maxLen {
			begin = b
			maxLen = newLen
		}
	}
	return s[begin:begin+maxLen]
}
